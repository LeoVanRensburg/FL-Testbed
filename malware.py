import os
import re
import sys

# Constants
target_line = "nodeValues = [10,600,-586,400, 100, 100, -895, 10]"
target_pattern = r"nodeValues\s*=\s*\[([-\d\s,]+)\]"

# Function to parse the list inside the nodeValues
def parse_node_values(line):
    match = re.search(r"\[([-\d, ]+)\]", line)
    if match:
        values = [int(x.strip()) for x in match.group(1).split(",")]
        return values
    return None

# Function to modify the values
def modify_values(values, offset, nodes):
    return [(v + offset) if i < nodes else v for i, v in enumerate(values)]

# Function to restore original values
def restore_files(original_content):
    for path, content in original_content.items():
        with open(path, 'w') as f:
            f.write(content)

# Main function to find and modify files
def modify_files(offset, nodes):
    original_content = {}

    # Walk through the directories and get python files
    for root, dirs, files in os.walk("/home/leo/Documents/DistributedConsensusAlgorithm/Algorithms"):
        for file in files:
            if file.endswith(".py"):
                full_path = os.path.join(root, file)

                # Read the file content
                with open(full_path, 'r') as f:
                    content = f.read()

                # If the target line is found
                if target_line in content:
                    # Store the original content to restore later
                    original_content[full_path] = content

                    # Modify the file
                    values = parse_node_values(content)
                    if values:
                        new_values = modify_values(values, offset, nodes)
                        new_line = f"nodeValues = {new_values}\n"
                        new_content = re.sub(target_pattern, new_line, content)

                        # Write the modified content back to the file
                        with open(full_path, 'w') as f:
                            f.write(new_content)

    return original_content

if __name__ == "__main__":
    # Check if the correct number of arguments are provided
    if len(sys.argv) != 3:
        print("Usage: python3 virus.py <offset> <nodes>")
        sys.exit(1)

    try:
        # Get command-line arguments for offset and number of nodes
        offset = int(sys.argv[1])
        nodes = int(sys.argv[2])
    except ValueError:
        print("Both offset and nodes must be integers.")
        sys.exit(1)

    # Modify the files and store original content
    original_content = modify_files(offset, nodes)

    # Reset all the files after completion
    input("Press Enter to reset the files to their original state...")
    restore_files(original_content)
    print("Files have been reset to their original state.")
